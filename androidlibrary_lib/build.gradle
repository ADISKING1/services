apply plugin: 'jacoco'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 20
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 20
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    packagingOptions {
        pickFirst 'META-INF/LICENSE'        /* File 1: jackson-core-2.4.1.jar
                                               File 2: jackson-annotations-2.4.1.jar */

        pickFirst 'META-INF/LICENSE.txt'    /* File 1: commons-io-2.4.jar
                                               File 2: joda-time-2.2.jar */

        pickFirst 'META-INF/NOTICE'         /* File 1: jackson-databind-2.4.1.3.jar
                                               File 2: jackson-core-2.4.1.1.jar */

        pickFirst 'META-INF/NOTICE.txt'     /* File 1: commons-io-2.4.jar
                                               File 2: joda-time-2.2.jar */
    }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile 'com.android.support:support-v4:22.2.0' // updated from 20.0.0
    compile 'joda-time:joda-time:2.2'

    // Testing dependencies
    testCompile 'junit:junit:4.12'
}

// Code to generate JaCoCo reports

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories = files("${buildDir.parent}/src/main/java")
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])

    // Include .exec/.ec files for both Unit and Android tests
    executionData = files([
            "${buildDir}/jacoco/testDebug.exec"//,
            //"${buildDir}/outputs/code-coverage/connected/coverage.ec"
    ])

    reports {
        xml {
            enabled = true
            destination "${project.buildDir}/reports/jacoco/jacoco.xml"
        }
        html {
            enabled = true
            destination "${project.buildDir}/reports/jacoco"
        }
    }
}

